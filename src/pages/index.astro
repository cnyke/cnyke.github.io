---
import BaseLayout from '../layouts/BaseLayout.astro';
---

<BaseLayout title="Octopuses - Resilience Continuum" description="Data visualization exploring octopus resilience patterns">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- Hero Section -->
    <div class="text-center mb-12">
      <h1 class="text-4xl md:text-6xl font-bold text-gray-900 mb-6">
        Octopuses
      </h1>
      <p class="text-xl text-gray-600 max-w-3xl mx-auto leading-relaxed">
        Where are octopuses found around the world?
      </p>
      <p class="text-lg text-gray-600 max-w-4xl mx-auto leading-relaxed mt-4">
        This data visualization shows octopus observations since 2000. Each species is shown in a unique color, and each dot represents a documented octopus observation in the Global Biodiversity Information Facility (GBIF). Click on a dot to see the species name, and use the slider and play button below to explore when and where each species has been seen.
      </p>
    </div>

    <!-- Map Section -->
    <div class="mb-16">
      <div class="bg-white rounded-lg shadow-lg overflow-hidden">
        <div class="relative">
          <div id="octopus-map" class="w-full h-96 md:h-[500px] bg-gray-100"></div>
          
          <!-- Legend -->
          <div id="species-legend" class="absolute top-4 right-4 bg-white/95 backdrop-blur-sm rounded-lg p-4 shadow-lg max-w-xs max-h-80 overflow-y-auto">
            <h3 class="text-sm font-semibold text-gray-900 mb-2">Species Legend</h3>
            <div id="legend-content" class="space-y-1 text-xs">
              <p class="text-gray-500">Loading species data...</p>
            </div>
          </div>
          
          <!-- Loading indicator -->
          <div id="loading-indicator" class="absolute inset-0 bg-white/80 backdrop-blur-sm flex items-center justify-center">
            <div class="bg-white rounded-lg p-6 shadow-lg">
              <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
              <p class="text-gray-600">Loading octopus data...</p>
            </div>
          </div>
        </div>
        
        <!-- Time Controls -->
        <div class="mt-6 bg-gray-50 rounded-lg p-6">
          <div class="flex flex-col space-y-4">
            <div class="flex items-center justify-between">
              <h3 class="text-lg font-semibold text-gray-900">Time Explorer</h3>
              <div class="flex items-center space-x-4">
                <span id="current-year" class="text-lg font-mono text-blue-600">2014</span>
                <button id="play-pause-btn" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors flex items-center space-x-2">
                  <svg id="play-icon" class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clip-rule="evenodd" />
                  </svg>
                  <svg id="pause-icon" class="w-4 h-4 hidden" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zM7 8a1 1 0 012 0v4a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v4a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                  </svg>
                  <span id="play-text">Play</span>
                </button>
              </div>
            </div>
            <div class="flex items-center space-x-4">
              <span class="text-sm text-gray-600 font-mono">2000</span>
              <input 
                type="range" 
                id="year-slider" 
                min="2000" 
                max="2024" 
                value="2014" 
                class="flex-1 h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider"
              />
              <span class="text-sm text-gray-600 font-mono">2024</span>
            </div>
            <div class="flex justify-between text-xs text-gray-500">
              <span>Use the slider to explore data by year</span>
              <span id="data-count">Loading...</span>
            </div>
          </div>
        </div>
      </div>
    </div>


    <!-- Data Citation -->
    <div class="mt-12 bg-white rounded-lg shadow-sm border p-6">
      <h3 class="text-lg font-semibold text-gray-900 mb-3">Data Source</h3>
      <p class="text-sm text-gray-600">
        Global Biodiversity Information Facility. GBIF.org (20 January 2025) GBIF Occurrence Download <a href="https://doi.org/10.15468/dl.v9ctjg" class="text-blue-600 hover:text-blue-800" target="_blank" rel="noopener">https://doi.org/10.15468/dl.v9ctjg</a>
      </p>
    </div>
  </div>

  <script>
    // Global variables
    let map: any;
    let octopusData: any[] = [];
    let currentMarkers: any[] = [];
    let currentYear: number = 2014;
    let isPlaying: boolean = false;
    let playInterval: any;
    const L = (window as any).L;

    // Species color mapping - using an ocean-inspired color palette
    const speciesColors = {
      'Octopus vulgaris Cuvier, 1797': '#FF6B6B',
      'Octopus tetricus Gould, 1852': '#4ECDC4',
      'Octopus cyanea Gray, 1849': '#45B7D1',
      'Octopus bimaculoides Pickford & McConnaughey, 1949': '#F7DC6F',
      'Octopus rubescens S.S.Berry, 1953': '#BB8FCE',
      'Octopus insularis Leite & Haimovici, 2008': '#52C4B0',
      'Octopus briareus G.C.Robson, 1929': '#FF8A65',
      'Octopus djinda Amor, 2021': '#5D6D7E',
      'Octopus americanus Froriep, 1806': '#EC7063',
      'Octopus berrima Stranks & Norman, 1992': '#58D68D',
      'Octopus pallidus Hoyle, 1885': '#F8C471',
      'Octopus kaurna Stranks, 1990': '#85929E',
      'Octopus hubbsorum S.S.Berry, 1953': '#A569BD',
      'Octopus sinensis d\'Orbigny, 1834': '#FF7043',
      'Octopus oculifer (Hoyle, 1904)': '#26A69A',
      'Octopus tehuelchus d\'Orbigny': '#7986CB',
      'Octopus joubini G.C.Robson, 1929': '#FFB74D',
      'Octopus mimus Gould, 1852': '#66BB6A',
      'Octopus micropyrsus S.S.Berry, 1953': '#42A5F5',
      'Octopus hummelincki Adam, 1936': '#FFCA28',
      'Octopus australis Hoyle, 1885': '#AB47BC',
      'Octopus bimaculatus A.E.Verrill, 1883': '#26C6DA',
      'Octopus maya G.L.Voss & Solís, 1966': '#9CCC65',
      'Octopus wolfi (Wülker, 1913)': '#FFA726',
      'Octopus fitchi S.S.Berry, 1953': '#8D6E63',
      'Octopus veligero S.S.Berry, 1953': '#78909C',
      'Octopus salutii Vérany, 1839': '#F06292',
      'Octopus minor (Sasaki, 1920)': '#5C6BC0',
      'Octopus laqueus Kaneko & Kubodera, 2005': '#4DB6AC',
      'Octopus bocki Adam, 1941': '#FF7043',
      'Octopus californicus (S.S.Berry, 1911)': '#D4E157',
      'Octopus Cuvier, 1798': '#90A4AE'
    };

    // Parse CSV data
    async function loadOctopusData() {
      try {
        const response = await fetch('/data/OctopusGBIF.csv');
        const csvText = await response.text();
        const lines = csvText.split('\n');
        const headers = lines[0].split('\t');
        
        // Find column indices
        const latIndex = headers.indexOf('decimalLatitude');
        const lngIndex = headers.indexOf('decimalLongitude');
        const speciesIndex = headers.indexOf('scientificName');
        const yearIndex = headers.indexOf('year');
        const localityIndex = headers.indexOf('locality');
        const countryIndex = headers.indexOf('countryCode');
        const observerIndex = headers.indexOf('recordedBy');
        const dateIndex = headers.indexOf('eventDate');
        
        octopusData = [];
        
        for (let i = 1; i < lines.length; i++) {
          const row = lines[i].split('\t');
          if (row.length < headers.length) continue;
          
          const lat = parseFloat(row[latIndex]);
          const lng = parseFloat(row[lngIndex]);
          const year = parseInt(row[yearIndex]);
          const species = row[speciesIndex];
          
          // Filter valid coordinates and years
          if (!isNaN(lat) && !isNaN(lng) && !isNaN(year) && 
              lat >= -90 && lat <= 90 && lng >= -180 && lng <= 180 &&
              year >= 2000 && year <= 2024 && species) {
            octopusData.push({
              lat,
              lng,
              species,
              year,
              locality: row[localityIndex] || 'Unknown',
              country: row[countryIndex] || 'Unknown',
              observer: row[observerIndex] || 'Unknown',
              date: row[dateIndex] || 'Unknown'
            });
          }
        }
        
        console.log(`Loaded ${octopusData.length} octopus observations`);
        hideLoadingIndicator();
        updateMap();
        updateLegend();
        
      } catch (error) {
        console.error('Error loading octopus data:', error);
        hideLoadingIndicator();
        const legendContent = document.getElementById('legend-content');
        if (legendContent) {
          legendContent.innerHTML = '<p class="text-red-500">Error loading data</p>';
        }
      }
    }

    // Hide loading indicator
    function hideLoadingIndicator() {
      const indicator = document.getElementById('loading-indicator');
      if (indicator) {
        indicator.style.display = 'none';
      }
    }

    // Update map markers for current year
    function updateMap() {
      // Clear existing markers
      currentMarkers.forEach(marker => map.removeLayer(marker));
      currentMarkers = [];
      
      // Filter data for current year
      const yearData = octopusData.filter(d => d.year === currentYear);
      
      // Add markers for current year
      yearData.forEach(observation => {
        const color = (speciesColors as any)[observation.species] || '#999999';
        
        const marker = L.circleMarker([observation.lat, observation.lng], {
          radius: 6,
          fillColor: color,
          color: 'transparent',
          weight: 0,
          opacity: 0,
          fillOpacity: 0.8
        });
        
        // Create popup content
        const popupContent = `
          <div class="p-2">
            <h4 class="font-semibold text-sm mb-2" style="color: ${color};">${observation.species}</h4>
            <div class="text-xs space-y-1">
              <p><strong>Date:</strong> ${observation.date}</p>
              <p><strong>Coordinates:</strong> ${observation.lat.toFixed(4)}, ${observation.lng.toFixed(4)}</p>
            </div>
          </div>
        `;
        
        marker.bindPopup(popupContent);
        marker.addTo(map);
        currentMarkers.push(marker);
      });
      
      // Update data count
      const dataCountElement = document.getElementById('data-count');
      if (dataCountElement) {
        dataCountElement.textContent = `${yearData.length} observations in ${currentYear}`;
      }
    }

    // Update species legend
    function updateLegend() {
      const yearData = octopusData.filter(d => d.year === currentYear);
      const speciesInYear = [...new Set(yearData.map(d => d.species))].sort();
      
      const legendContent = document.getElementById('legend-content');
      if (!legendContent) return;
      
      if (speciesInYear.length === 0) {
        legendContent.innerHTML = '<p class="text-gray-500">No data for this year</p>';
        return;
      }
      
      const legendHTML = speciesInYear.map(species => {
        const color = (speciesColors as any)[species] || '#999999';
        const count = yearData.filter(d => d.species === species).length;
        const shortName = species.split(' ').slice(0, 2).join(' ');
        
        return `
          <div class="flex items-center space-x-2">
            <div class="w-3 h-3 rounded-full border border-white" style="background-color: ${color};"></div>
            <span class="text-gray-700 flex-1">${shortName}</span>
            <span class="text-gray-500">${count}</span>
          </div>
        `;
      }).join('');
      
      legendContent.innerHTML = legendHTML;
    }

    // Handle year slider change
    function onYearChange(year: any) {
      currentYear = parseInt(year);
      const currentYearElement = document.getElementById('current-year');
      const yearSliderElement = document.getElementById('year-slider') as HTMLInputElement;
      
      if (currentYearElement) {
        currentYearElement.textContent = currentYear.toString();
      }
      if (yearSliderElement) {
        yearSliderElement.value = currentYear.toString();
      }
      updateMap();
      updateLegend();
    }

    // Play/pause functionality
    function togglePlayPause() {
      if (isPlaying) {
        pauseAnimation();
      } else {
        startAnimation();
      }
    }

    function startAnimation() {
      isPlaying = true;
      const playIcon = document.getElementById('play-icon');
      const pauseIcon = document.getElementById('pause-icon');
      const playText = document.getElementById('play-text');
      
      if (playIcon) playIcon.classList.add('hidden');
      if (pauseIcon) pauseIcon.classList.remove('hidden');
      if (playText) playText.textContent = 'Pause';
      
      playInterval = setInterval(() => {
        if (currentYear >= 2024) {
          currentYear = 2000;
        } else {
          currentYear++;
        }
        onYearChange(currentYear);
      }, 600); // Change year every 600ms
    }

    function pauseAnimation() {
      isPlaying = false;
      const playIcon = document.getElementById('play-icon');
      const pauseIcon = document.getElementById('pause-icon');
      const playText = document.getElementById('play-text');
      
      if (playIcon) playIcon.classList.remove('hidden');
      if (pauseIcon) pauseIcon.classList.add('hidden');
      if (playText) playText.textContent = 'Play';
      
      if (playInterval) {
        clearInterval(playInterval);
      }
    }

    // Initialize everything when page loads
    document.addEventListener('DOMContentLoaded', function() {
      if (typeof window !== 'undefined' && L) {
        // Initialize map centered on Central America (no zoom controls)
        map = L.map('octopus-map', {
          zoomControl: false,
          scrollWheelZoom: false,
          doubleClickZoom: false,
          touchZoom: false,
          boxZoom: false
        }).setView([15, -85], 3);

        // Add light tile layer
        L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {
          attribution: '© OpenStreetMap contributors © CARTO'
        }).addTo(map);

        // Set up event listeners
        const yearSlider = document.getElementById('year-slider');
        const playPauseBtn = document.getElementById('play-pause-btn');
        
        if (yearSlider) {
          yearSlider.addEventListener('input', (e) => {
            const target = e.target as HTMLInputElement;
            if (target) {
              onYearChange(target.value);
            }
          });
        }

        if (playPauseBtn) {
          playPauseBtn.addEventListener('click', togglePlayPause);
        }

        // Load data
        loadOctopusData();
      }
    });
  </script>
  
  <!-- Load Leaflet JavaScript and CSS -->
  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
  
  <!-- Custom styles for the slider and map -->
  <style>
    /* Custom slider styles */
    .slider {
      -webkit-appearance: none;
      appearance: none;
      height: 8px;
      border-radius: 4px;
      background: linear-gradient(90deg, #e5e7eb 0%, #d1d5db 100%);
      outline: none;
      transition: all 0.2s;
    }
    
    .slider:hover {
      background: linear-gradient(90deg, #d1d5db 0%, #9ca3af 100%);
    }
    
    .slider::-webkit-slider-thumb {
      -webkit-appearance: none;
      appearance: none;
      width: 20px;
      height: 20px;
      border-radius: 50%;
      background: #ffffff;
      border: 2px solid #3b82f6;
      cursor: pointer;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
      transition: all 0.2s;
    }
    
    .slider::-webkit-slider-thumb:hover {
      transform: scale(1.1);
      border-color: #1d4ed8;
    }
    
    .slider::-moz-range-thumb {
      width: 20px;
      height: 20px;
      border-radius: 50%;
      background: #ffffff;
      border: 2px solid #3b82f6;
      cursor: pointer;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
      border: none;
    }
    
    /* Leaflet popup customization */
    .leaflet-popup-content-wrapper {
      border-radius: 8px;
    }
    
    .leaflet-popup-content {
      margin: 0;
      line-height: 1.4;
    }
  </style>
</BaseLayout>
